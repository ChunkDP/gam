---
description: 适用于golang的编写规范
globs: *.go
---

## General Rules
- 所有代码必须有清晰的注释，解释复杂逻辑和功能
- 遵循 DRY (Don't Repeat Yourself) 原则
- 变量和函数命名应当清晰表达其用途
- 避免硬编码值，使用常量或配置
- 错误处理必须完整，不允许忽略错误
- 代码提交前必须进行格式化

## Golang Rules

### 代码结构
- 后端项目结构遵循标准 Go 项目布局
- 使用 `internal` 目录存放不对外暴露的包
- 使用 `pkg` 目录存放可被外部项目导入的包
- 使用 `cmd` 目录存放主要应用入口
- 使用 `api` 目录定义 HTTP API 相关内容

### 命名规范
- 包名使用小写单词，不使用下划线或混合大小写
- 导出的函数、变量、常量、类型使用驼峰命名法并首字母大写
- 非导出的函数、变量、常量、类型使用驼峰命名法并首字母小写
- 接口名应以 `er` 结尾，表示行为，如 `Reader`, `Writer`
- 避免使用缩写，除非缩写是众所周知的（如 HTTP, URL）

### 代码风格
- 使用 `gofmt` 或 `goimports` 格式化代码
- 函数参数和返回值较多时应当换行
- 错误处理应当紧跟可能产生错误的语句
- 使用 `context.Context` 作为函数的第一个参数传递上下文
- 使用 `defer` 确保资源正确释放

### 注释规范
- 所有导出的函数、类型、变量、常量必须有注释
- 包应当有包级别的注释
- 复杂的逻辑应当有详细注释
- 使用 `// TODO:` 标记待完成的工作
- API 函数应当有完整的 Swagger 注释

### 错误处理
- 错误应当被检查并处理，不允许使用 `_` 忽略错误
- 错误信息应当有意义，包含足够的上下文
- 使用 `errors.Wrap` 或类似函数包装错误，保留调用栈
- 避免使用 `panic`，除非是不可恢复的错误

### 数据库操作
- 使用事务确保数据一致性
- 避免 N+1 查询问题
- 使用参数化查询防止 SQL 注入
- 数据库操作应当有超时控制
- 使用索引优化查询性能

### API 设计
- 遵循 RESTful API 设计原则
- 使用 HTTP 状态码表示请求结果
- API 响应格式统一，包含状态码、消息和数据
- API 版本控制应当在 URL 中体现
- 使用 JWT 或类似机制进行身份验证

### 测试规范
- 核心功能必须有单元测试
- 测试文件命名为 `xxx_test.go`
- 使用表驱动测试处理多种情况
- 使用 mock 对象测试外部依赖
- 测试覆盖率应当达到 70% 以上

### 项目特定规范
- 后端handlers文件夹中的handler进行编写时，请参考其他的文件，提供完整的符合swagger的注释
- 返回时用pkg/utils/response/response.go提供的函数，例如response.Success(c, data),response.Error(c, http.StatusBadRequest, "无效的用户ID")
- 后端services文件夹中的service进行编写时，请参考其他的文件，编写接口，使用gorm
- 后端路由注册统一在backend/api/routes/routes.go中进行注册
- 后端项目的名称为normaladmin/backend
- 编写handler和service时，根据功能判断是否继承基础的BaseCRUD,进而使用装饰器功能

